---
alwaysApply: true
---

# Comment Writing Style Rules

## Comment Block Format
- **Use `/* */` for multi-line comments** instead of Doxygen `/** */`
- **Use `**bold text**` for headings and important concepts**
- **Add blank lines within comments for visual separation**
- **Remove formal documentation tags** like `@brief`, `@tparam`, `@code`
- **Write comments in natural, conversational style**

## Comment Content Guidelines
- **Explain design rationale and trade-offs** rather than just describing what code does
- **Include performance implications** when relevant
- **Mention limitations and constraints** of the implementation
- **Explain use cases and ideal scenarios** for the code
- **Focus on "why" decisions were made** rather than mechanical "what"

## Assertion Comments
- **Place assertion explanations directly above the assertion**
- **Explain what condition is being checked and why it should be true**
- **Provide context about the invariant being maintained**

## Visual Formatting in Comments
- **Use ASCII art for diagrams with proper spacing**:
  ```cpp
  // 
  //   Empty: sentinel->sentinel
  //   Non-empty: head<->...nodes...<->tail<->sentinel
  // 
  ```
- **Group related comments with blank line separation**
- **Prefer comments above code rather than trailing comments**

## Examples

### ✅ Good Comment Style:
```cpp
/*

**Intrusive doubly-linked list**

This is a circular intrusive doubly-linked list using a sentinel node.

The sentinel acts as both head and tail, allowing for uniform insert/remove operations without special cases or null checks.
Since the list is circular, an empty list has sentinel->next and sentinel->prev pointing to itself.

This design avoids dynamic memory allocation and provides O(1) insertion and removal.

Ideal for performance-critical systems where memory layout and control matter.
The main limitation is that a node can only belong to one list at a time.

*/

// Ensure that both pointers are either null (unlinked) or non-null (linked)
assert((next_ != nullptr && prev_ != nullptr) || (next_ == nullptr && prev_ == nullptr));

// Optimized: only check one pointer since both are always null or non-null together
// This invariant is maintained by the circular list design
return next_ != nullptr;
```

### ❌ Avoid This Style:
```cpp
/**
 * @brief Intrusive doubly-linked list
 * @tparam Member Pointer to the list_node member
 */

assert(condition); // Check condition
```

## When to Comment
- **Complex algorithms** requiring explanation
- **Design decisions** that aren't obvious from code
- **Performance optimizations** and their rationale
- **Safety invariants** and why assertions exist
- **Non-obvious constraints** or requirements
- **Tricky pointer arithmetic** or memory operations

## When NOT to Comment
- **Obvious operations** like simple assignments
- **Standard container operations** that are self-explanatory  
- **Trivial getters/setters**
- **Simple loop iterations**
- **Basic arithmetic** unless it represents something non-obvious

## Specific Patterns from User Edits

### Class/Function Documentation
```cpp
/*

**Class or Function Name**

Brief description of what it does and why it exists.

Explanation of design decisions, trade-offs, and constraints.
Include performance characteristics and ideal use cases.
Mention any limitations or caveats.

*/
```

### Assertion Documentation
```cpp
// Explain what invariant is being checked and why it should hold
assert(condition);

// Additional context about optimization or design rationale
// explaining why this approach was chosen
```

### Visual Diagrams
```cpp
// 
//   State 1: description
//   State 2: description
// 
```

### Design Decision Comments
```cpp
// Explain the problem this code solves.
// Note: mention any alternatives considered and why this approach was chosen.
code_here();
```

## Comment Placement Rules
- **Above the code** rather than at the end of lines
- **Group related explanations** with blank lines for separation
- **Explain before showing** - context first, then implementation# Comment Writing Style Rules

## Comment Block Format
- **Use `/* */` for multi-line comments** instead of Doxygen `/** */`
- **Use `**bold text**` for headings and important concepts**
- **Add blank lines within comments for visual separation**
- **Remove formal documentation tags** like `@brief`, `@tparam`, `@code`
- **Write comments in natural, conversational style**

## Comment Content Guidelines
- **Explain design rationale and trade-offs** rather than just describing what code does
- **Include performance implications** when relevant
- **Mention limitations and constraints** of the implementation
- **Explain use cases and ideal scenarios** for the code
- **Focus on "why" decisions were made** rather than mechanical "what"

## Assertion Comments
- **Place assertion explanations directly above the assertion**
- **Explain what condition is being checked and why it should be true**
- **Provide context about the invariant being maintained**

## Visual Formatting in Comments
- **Use ASCII art for diagrams with proper spacing**:
  ```cpp
  // 
  //   Empty: sentinel->sentinel
  //   Non-empty: head<->...nodes...<->tail<->sentinel
  // 
  ```
- **Group related comments with blank line separation**
- **Prefer comments above code rather than trailing comments**

## Examples

### ✅ Good Comment Style:
```cpp
/*

**Intrusive doubly-linked list**

This is a circular intrusive doubly-linked list using a sentinel node.

The sentinel acts as both head and tail, allowing for uniform insert/remove operations without special cases or null checks.
Since the list is circular, an empty list has sentinel->next and sentinel->prev pointing to itself.

This design avoids dynamic memory allocation and provides O(1) insertion and removal.

Ideal for performance-critical systems where memory layout and control matter.
The main limitation is that a node can only belong to one list at a time.

*/

// Ensure that both pointers are either null (unlinked) or non-null (linked)
assert((next_ != nullptr && prev_ != nullptr) || (next_ == nullptr && prev_ == nullptr));

// Optimized: only check one pointer since both are always null or non-null together
// This invariant is maintained by the circular list design
return next_ != nullptr;
```

### ❌ Avoid This Style:
```cpp
/**
 * @brief Intrusive doubly-linked list
 * @tparam Member Pointer to the list_node member
 */

assert(condition); // Check condition
```

## When to Comment
- **Complex algorithms** requiring explanation
- **Design decisions** that aren't obvious from code
- **Performance optimizations** and their rationale
- **Safety invariants** and why assertions exist
- **Non-obvious constraints** or requirements
- **Tricky pointer arithmetic** or memory operations

## When NOT to Comment
- **Obvious operations** like simple assignments
- **Standard container operations** that are self-explanatory  
- **Trivial getters/setters**
- **Simple loop iterations**
- **Basic arithmetic** unless it represents something non-obvious

## Specific Patterns from User Edits

### Class/Function Documentation
```cpp
/*

**Class or Function Name**

Brief description of what it does and why it exists.

Explanation of design decisions, trade-offs, and constraints.
Include performance characteristics and ideal use cases.
Mention any limitations or caveats.

*/
```

### Assertion Documentation
```cpp
// Explain what invariant is being checked and why it should hold
assert(condition);

// Additional context about optimization or design rationale
// explaining why this approach was chosen
```

### Visual Diagrams
```cpp
// 
//   State 1: description
//   State 2: description
// 
```

### Design Decision Comments
```cpp
// Explain the problem this code solves.
// Note: mention any alternatives considered and why this approach was chosen.
code_here();
```

## Comment Placement Rules
- **Above the code** rather than at the end of lines
- **Group related explanations** with blank lines for separation
- **Explain before showing** - context first, then implementation